I'm writing this extension mainly for myself, but I'm publishing it on the off chance someone may find it useful.

* Installation
If you want to install this, just create a subdirectory in the Anki addons directory and paste the ~__init__.py~ file there. The addon directory you can access through Tools -> Addons -> View Files.
* How to read the key sequences used here
I'm using Emacs-like key sequences to invoke my commands. Some commands are invoked by more than one keys pressed in succession. The key sequence ~A, B, C~ means that you should press the key ~A~ followed by the key ~B~ followed by the key ~C~. So ~Ctrl+X, S, C~ means that you should first press ~Ctrl+X~ then ~S~ and then ~C~.
* Conflicting shortcuts
Since some default shortcuts conflict with keys I want to use for my own commands, I've rebound or disabled them. Here is the list of rebound keys:
- ~Ctrl+N~ (change note type) is rebound to ~Ctrl+Alt+N~
- ~Ctrl+D~ (change deck) is rebound to ~Ctrl+Alt+D~
- ~Ctrl+B~ (bold) is rebound to ~Ctrl+Alt+B~
- ~Ctrl+I~ (italic) is rebound to ~Ctrl+Alt+I~
- ~Ctrl+U~ (underline) is rebound to ~Ctrl+Alt+U~
* Automatic first field prefix
Press ~Ctrl+X, P~ to specify the prefix. Thereafter it will be automatically inserted in the first field of each new note. To stop this, just invoke ~Ctrl+X, P~ again and empty the form.
* Codify selection
Useful for when making a lot of programming related cards.

If you select a text and invoke ~Ctrl+X, C~, it will "codify" it, ~like this~. If there is no selected text, pressing the shortcut will open a form which asks for the code. Pressing Enter will then insert the text you typed in the form ~codified~.
* Storing/restoring the state of the Add dialog
Often I'm writing a note for one context, but I get an idea for another. This necessitates changing the deck, note type, fields and tags for the new note, and then restoring them to their previous state. There is a set of commands, all bound to the prefix ~Ctrl+X, S~, which facilitate this (Here the ~S~ stands for "State"). To store the current state, invoke ~Ctrl+X, S, S~ (that is press ~Ctrl+X~ followed by ~S~ followed by ~S~ again). You can then change the state to whatever you like. To restore what you saved, invoke ~Ctrl+Alt+S, R~. If you want to at the same time store the state and clear the fields and tags, invoke ~Ctrl+X, S, C~ (the ~C~ stands for "Clear").
* Emacs-like commands
The extension enables moving using keys similar to those in Emacs. Here is a list of all of the commands currently available and their corresponding Emacs commands:
- ~Ctrl+Space~ :: ~set-mark-command~ (for more about the mark, see below)
- ~Ctrl+X, H~ :: ~mark-whole-buffer~
- ~Ctrl+A~ :: ~beginning-of-line~
- ~Ctrl+E~ :: ~end-of-line~
- ~Alt+F~ :: ~forward-word~
- ~Alt+B~ :: ~backward-word~
- ~Ctrl+F~ :: ~forward-char~
- ~Ctrl+B~ :: ~backward-char~
- ~Ctrl+G~ :: ~keyboard-quit~ (for more on quitting, see below)
- ~Ctrl+K~ :: ~kill-region~ (i.e. cut)
- ~Ctrl+Y~ :: ~yank~ (i.e. paste)
- ~Alt+W~ :: ~kill-ring-save~ (i.e copy)
** The Mark
This is my attempt to simulate ~transient-mark-mode~. The mark is only relevant for the Emacs-like movement commands provided here. *Any* other key immediately deactivates the mark. Invoking ~Ctrl+G~ also deactivates it. What may be confusing is that the mark can be active while a selection is still in place. For example, if you double click on some word, this will highlight it, but the mark won't be active, becauase it was not set with ~Ctrl+Space~. I may fix this mismatch soon.
** Qutting
For now quitting just deactivates the mark if it is active
* Old cloze behavior
With the newest version of Anki, the Cloze behavior has changed. Now you cannot use ~Ctrl+Shift+C~ to cloze in a note whose note type is not a Cloze type. This introduces friction in my workflow, so I rebound ~Ctrl+Shift+C~ to invoke the old behavior.
* Focus on first field
The ~Ctrl+X, 1~ key is bound to a command which focuses on the first field. I frequently find this useful, e.g. after changing the tags with ~Ctrl+Shift+T~.
